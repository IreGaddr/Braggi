// Demonstration of different regime types in Braggi
// Each regime enforces different access patterns

region BufferRegion(2048) regime FIFO {
    // First-In-First-Out access (queue-like)
    
    func process_stream() {
        var buf1 = alloc(100); // First allocation
        var buf2 = alloc(100); // Second allocation
        
        // FIFO access means buf1 must be processed before buf2
        process(buf1); // Valid
        process(buf2); // Valid
        
        // Can't access buf2 before buf1 is fully processed
        // process(buf2) before process(buf1) would be a constraint violation
    }
}

region StackRegion(1024) regime FILO {
    // First-In-Last-Out access (stack-like)
    
    func calc() {
        var a = alloc(8); // First allocation
        var b = alloc(8); // Second allocation
        
        // FILO access means b must be accessed before a
        set_value(b, 42); // Valid
        set_value(a, 24); // Valid
        
        // a cannot be accessed after b is freed
        // free(b) followed by use(a) would be a constraint violation
    }
}

region ArrayRegion(4096) regime SEQ {
    // Sequential access (array-like)
    
    func iterate() {
        var array = alloc(400);
        
        // SEQ access means elements must be accessed in order
        for (var i = 0; i < 100; i++) {
            array[i] = i * 2; // Valid sequential access
        }
        
        // Random access would be a constraint violation
        // array[50] = 42 after accessing array[51] would violate constraints
    }
}

region HeapRegion(8192) regime RAND {
    // Random access (heap-like)
    
    func main() -> int {
        // Connect the regions with periscopes
        periscope from BufferRegion to HeapRegion out;
        periscope from StackRegion to HeapRegion out;
        periscope from ArrayRegion to HeapRegion out;
        
        // Access all other regions through periscopes
        process_stream();
        calc();
        iterate();
        
        // In RAND regime, any access pattern is valid
        var obj1 = alloc(200);
        var obj2 = alloc(300);
        var obj3 = alloc(400);
        
        // Can access in any order
        use(obj3);
        use(obj1);
        use(obj2);
        
        // Can free in any order
        free(obj1);
        free(obj3);
        free(obj2);
        
        return 0;
    }
} 