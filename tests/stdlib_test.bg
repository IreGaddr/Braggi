// Test program for Braggi standard library
// "Testing is like a rodeo - you're gonna get thrown, but you keep gettin' back on!"

// Import standard library modules
import core;
import io;
import math;

// Main function to run tests
fn main() -> Int {
    println("Running Braggi standard library tests...");
    
    // Test core functionality
    test_core();
    
    // Test IO functionality
    test_io();
    
    // Test math functionality
    test_math();
    
    println("All tests completed successfully!");
    return 0;
}

// Test core functionality
fn test_core() -> Void {
    println("Testing core functionality...");
    
    // Test basic arithmetic
    let a: Int = 5;
    let b: Int = 3;
    
    let sum: Int = add(a, b);
    assert(equals(sum, 8), "Addition failed");
    
    let diff: Int = subtract(a, b);
    assert(equals(diff, 2), "Subtraction failed");
    
    let product: Int = multiply(a, b);
    assert(equals(product, 15), "Multiplication failed");
    
    let quotient: Int = divide(a, b);
    assert(equals(quotient, 1), "Division failed");
    
    // Test boolean operations
    assert(and(true, true), "AND operation failed");
    assert(not(and(true, false)), "AND operation failed");
    assert(or(true, false), "OR operation failed");
    assert(not(false), "NOT operation failed");
    
    println("Core tests passed!");
}

// Test IO functionality
fn test_io() -> Void {
    println("Testing IO functionality...");
    
    // Just test that print functions don't crash
    print("This is a test message without a newline.");
    println("This is a test message with a newline.");
    
    // Test file operations if environment allows
    if (false) { // Disable for automated testing
        let test_file = open_file("test.txt", "w");
        write_file(test_file, "Hello, Braggi!");
        close_file(test_file);
        
        let content = read_file_to_string("test.txt");
        assert(equals(content, "Hello, Braggi!"), "File I/O failed");
    }
    
    println("IO tests passed!");
}

// Test math functionality
fn test_math() -> Void {
    println("Testing math functionality...");
    
    // Test constants
    assert(less_than(abs(subtract(PI, 3.14159)), 0.0001), "PI constant incorrect");
    
    // Test basic math functions
    assert(equals(abs(-5), 5), "abs function failed");
    assert(equals(min(3, 7), 3), "min function failed");
    assert(equals(max(3, 7), 7), "max function failed");
    
    // Test trig functions
    let sin_0 = sin(0.0);
    assert(less_than(abs(sin_0), 0.0001), "sin(0) should be 0");
    
    let cos_0 = cos(0.0);
    assert(less_than(abs(subtract(cos_0, 1.0)), 0.0001), "cos(0) should be 1");
    
    // Test power functions
    assert(equals(pow(2.0, 3.0), 8.0), "pow function failed");
    assert(equals(sqrt(4.0), 2.0), "sqrt function failed");
    
    println("Math tests passed!");
}

// Simple assertion function
fn assert(condition: Bool, message: String) -> Void {
    if (not(condition)) {
        println("ASSERTION FAILED: " + message);
        // In a real implementation, we would exit here
    }
} 