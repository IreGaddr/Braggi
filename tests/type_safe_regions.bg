// Demonstration of type safety with regions in Braggi

// Define some types for our program
type User {
    int id;
    string name;
    int age;
}

type Transaction {
    int id;
    int user_id;
    float amount;
    string description;
}

region UserRegion(4096) regime RAND {
    // Store users in this region
    func create_user(id, name, age) -> User {
        var user = alloc<User>();
        user.id = id;
        user.name = name;
        user.age = age;
        return user;
    }
    
    func update_user(user, name, age) {
        // Type and region safety ensures this is a valid User object
        user.name = name;
        user.age = age;
    }
}

region TransactionRegion(8192) regime FIFO {
    // Store transactions in this region
    func create_transaction(id, user_id, amount, description) -> Transaction {
        var tx = alloc<Transaction>();
        tx.id = id;
        tx.user_id = user_id;
        tx.amount = amount;
        tx.description = description;
        return tx;
    }
    
    func process_transaction(tx) {
        // Process transaction logic here
        // Type and region safety ensures this is a valid Transaction
        out("Processing transaction #" + tx.id + " for user #" + tx.user_id);
        out("Amount: " + tx.amount + " - " + tx.description);
    }
}

region ApplicationRegion(2048) regime RAND {
    func main() -> int {
        // Create periscopes for controlled access between regions
        periscope from UserRegion to ApplicationRegion bidirectional;
        periscope from TransactionRegion to ApplicationRegion bidirectional;
        
        // Create users
        var alice = create_user(1, "Alice", 32);
        var bob = create_user(2, "Bob", 28);
        
        // Create transactions
        var tx1 = create_transaction(1, alice.id, 100.50, "Payment for services");
        var tx2 = create_transaction(2, bob.id, 75.25, "Monthly subscription");
        
        // Process transactions
        process_transaction(tx1);
        process_transaction(tx2);
        
        // Update a user
        update_user(alice, "Alice Smith", 33);
        
        // The following would be a constraint violation at compile-time:
        // update_user(tx1, "Invalid", 0);  // tx1 is not a User!
        
        return 0;
    }
} 